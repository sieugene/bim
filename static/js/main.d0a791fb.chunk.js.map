{"version":3,"sources":["redux/persons-reducer.ts","Components/Helper/Helper.jsx","Components/Table/DeleteTable/DeleteTable.tsx","Components/Table/Table.tsx","Components/Table/TableContainer.tsx","Components/CreateTable/CreateTable.tsx","Components/CreateTable/CreateTableContainer.tsx","Components/EditTables/EditTables.tsx","Components/EditTables/EditTablesContainer.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["initialState","persons","addingTableForm","ID","undefined","Name","Age","onChangeVal","state","action","copy","index","table","setPersonsAC","type","personsReducer","form","Sorting","copyarray","setArray","toggleSortActive","options","a","isSorted","isSortedOfId","toggleSort","toggleForId","essences","b","Number","essencesRev","isSortedOfAge","toggleForAge","isSortedOfName","toggleForName","sort","TrackChangeValue","e","valueFromState","target","value","length","DeleteTable","props","pressDelete","deleteTable","currentDelete","toggleShow","className","onClick","Table","sortOfId","style","colorIsActive","sortOfName","sortOfAge","showModal","arr","map","p","key","deleteModalShow","TableContainer","useState","setCurrentForDelete","useEffect","array","splice","option","color","CreateTable","addingMode","onChange","onChangeForm","onSubmit","preventDefault","name","required","createTable","addingActive","connect","addTableAC","updateValuesFormAC","switchMode","id","age","alert","EditTables","save","copyArr","placeholder","updateOneTabletInAllAC","setArr","canSave","toggleCan","toggleEditTables","editTables","currentTarget","children","checkOnUndefined","PersonJson","Boolean","window","location","hostname","match","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0a791fb.chunk.js","sourcesContent":["\r\n\r\nconst SET_PERSONS = 'SET_PERSONS'\r\nconst UPDATE_VALUES_FORM = 'UPDATE_VALUES_FORM'\r\nconst ADD_TABLE = 'ADD_TABLE'\r\nconst EDIT_ALL_TABLES = 'EDIT_ALL_TABLES'\r\n\r\n\r\nexport type PersonsType = {\r\n    ID: string\r\n    Name: string\r\n    Age: string\r\n}\r\nexport type FormType = {\r\n    ID: undefined | string,\r\n    Name: undefined | string,\r\n    Age: undefined | string\r\n}\r\n\r\nlet initialState = {\r\n    persons: [] as PersonsType[],\r\n    addingTableForm: {\r\n        ID: undefined,\r\n        Name: undefined,\r\n        Age: undefined,\r\n    } as FormType\r\n}\r\ntype InitialStateType = typeof initialState;\r\n\r\n\r\nconst onChangeVal = (state:InitialStateType,action:UpdateOneTabletInAllType) => {\r\n    let copy = [...state.persons]\r\n    copy[action.index] = {\r\n        //@ts-ignore\r\n        ID: action.table.ID,\r\n        //@ts-ignore\r\n        Name: action.table.Name,\r\n        //@ts-ignore\r\n        Age: action.table.Age\r\n    }\r\n    //@ts-ignore\r\n    return copy\r\n}\r\n\r\nconst personsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case UPDATE_VALUES_FORM:\r\n            return {\r\n                ...state,\r\n                addingTableForm: {\r\n                    ID: action.form.ID,\r\n                    Name: action.form.Name,\r\n                    Age: action.form.Age\r\n                }\r\n            }\r\n        case ADD_TABLE:\r\n            return {\r\n                ...state,\r\n                persons: [...state.persons, action.table]\r\n            }\r\n        case SET_PERSONS:\r\n            return {\r\n                ...state,\r\n                persons: action.persons\r\n            }\r\n        case EDIT_ALL_TABLES:\r\n            return {\r\n                ...state,\r\n                persons: onChangeVal(state,action)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = SetPersonsType | AddTableType | UpdateValuesFormType | UpdateOneTabletInAllType\r\n\r\ntype SetPersonsType = {\r\n    type: typeof SET_PERSONS,\r\n    persons: PersonsType[]\r\n}\r\n\r\nexport const setPersonsAC = (persons: PersonsType[]): SetPersonsType => {\r\n    return {\r\n        type: SET_PERSONS,\r\n        persons\r\n    }\r\n}\r\n\r\ntype AddTableType = {\r\n    type: typeof ADD_TABLE,\r\n    table: PersonsType\r\n}\r\n\r\nexport const addTableAC = (table: PersonsType): AddTableType => {\r\n    return {\r\n        type: ADD_TABLE,\r\n        table\r\n    }\r\n}\r\n\r\ntype UpdateValuesFormType = {\r\n    type: typeof UPDATE_VALUES_FORM,\r\n    form: FormType\r\n}\r\n\r\nexport const updateValuesFormAC = (ID: string, Name: string, Age: string): UpdateValuesFormType => {\r\n    return {\r\n        type: UPDATE_VALUES_FORM,\r\n        form: {\r\n            ID,\r\n            Name,\r\n            Age\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ntype UpdateOneTabletInAllType = {\r\n    type: typeof EDIT_ALL_TABLES,\r\n    table: PersonsType,\r\n    index: number\r\n}\r\n\r\nexport const updateOneTabletInAllAC = (table: PersonsType, index: number): UpdateOneTabletInAllType => {\r\n    return {\r\n        type: EDIT_ALL_TABLES,\r\n        table,\r\n        index\r\n    }\r\n}\r\n\r\n\r\nexport default personsReducer\r\n","\r\n//Функция для сортировки по ID, NAME, AGE\r\nexport const Sorting = async (type, copyarray, setArray, toggleSortActive, options) => {\r\n    let isSorted;\r\n    let toggleSort;\r\n    let essences;\r\n    let essencesRev;\r\n    if (type === \"id\") {\r\n        isSorted = options.isSortedOfId\r\n        toggleSort = options.toggleForId\r\n        essences = (a, b) => {\r\n            return (Number(a.ID) > Number(b.ID))\r\n        }\r\n        essencesRev = (a, b) => {\r\n            return (Number(a.ID) < Number(b.ID))\r\n        }\r\n    }\r\n    if (type === \"age\") {\r\n        isSorted = options.isSortedOfAge\r\n        toggleSort = options.toggleForAge\r\n        essences = (a, b) => {\r\n            return (Number(a.Age) > Number(b.Age))\r\n        }\r\n        essencesRev = (a, b) => {\r\n            return (Number(a.Age) < Number(b.Age))\r\n        }\r\n    }\r\n    if (type === \"name\") {\r\n        isSorted = options.isSortedOfName\r\n        toggleSort = options.toggleForName\r\n        essences = (a, b) => {\r\n            return (a.Name > b.Name)\r\n        }\r\n        essencesRev = (a, b) => {\r\n            return (a.Name < b.Name)\r\n        }\r\n    }\r\n    toggleSortActive(true)\r\n    if (isSorted === false) {\r\n        let sort = copyarray.sort(function (a, b) {\r\n            if (essences(a, b)) {\r\n                return 1;\r\n            } else if (essencesRev(a, b)) {\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        await setArray(sort)\r\n        toggleSortActive(false)\r\n        toggleSort(true);\r\n    } else if (isSorted === true) {\r\n        let sort = copyarray.sort(function (a, b) {\r\n            if (essences(a, b)) {\r\n                return -1;\r\n            } else if (essencesRev(a, b)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        await setArray(sort)\r\n        toggleSortActive(false)\r\n        toggleSort(false)\r\n    }\r\n}\r\n\r\n//Валидация из тестового значения\r\n//нет проверки на Number, так как JSON значения имеют изначально String\r\n//из-за чего могут возникнуть проблемы, для этого создаваемым input, назначен type=\"Number\"\r\nexport const Validate = (id, name, age) => {\r\n    if (!id || !name || !age) {\r\n        alert('Не правильно!')\r\n        return true\r\n    } else if (name.length >= 100) {\r\n        alert('Имя больше 100!')\r\n        return true\r\n    } else if (Number(age) > 1000) {\r\n        alert('Ошибка возраст не может быть более 1000!')\r\n        return true\r\n    }\r\n}\r\n\r\n//Вспомогательная функция для того, чтобы назначить значения из стейта при изменение\r\n//так как отслеживание всех input, может сказать на производительности\r\n//для этого сделан простой обработчик \r\nexport const TrackChangeValue = (e, valueFromState) => {\r\n    if (e.target.value.length <= 0 || undefined) {\r\n        e.target.value = valueFromState\r\n    } else {\r\n        return e.target.value\r\n    }\r\n}\r\n\r\n//Проверка на undefined значения для редактирования таблиц\r\nexport const checkOnUndefined = (e) => {\r\n    if (!e.currentTarget.children[0].children[0].value || !e.currentTarget.children[1].children[0].value ||\r\n        !e.currentTarget.children[2].children[0].value\r\n    ) {\r\n        debugger\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n","import React from 'react'\r\nimport './DeleteTable.css'\r\n\r\nconst DeleteTable = (props: any) => {\r\n    const pressDelete = async() => {\r\n        await props.deleteTable(props.currentDelete)\r\n        props.toggleShow(false);\r\n    }\r\n    return (\r\n        <div className='deleteModal'>\r\n            <div className=\"title\">\r\n                Удалить эту таблицу?\r\n            </div>\r\n            <div className=\"wrap\">\r\n                <button className='confirm' onClick={pressDelete}>Удалить</button>\r\n                <button className='cancel' onClick={() => {props.toggleShow(false)}}>Отмена</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteTable","import React, { Dispatch, SetStateAction } from 'react'\r\nimport { PersonsType } from '../../redux/persons-reducer'\r\nimport './Table.css'\r\nimport DeleteTable from './DeleteTable/DeleteTable';\r\n\r\n\r\ntype Props = {\r\n    sortOfId: () => void\r\n    sortOfName: () => void\r\n    sortOfAge: () => void\r\n    colorIsActive: (option: boolean) => any\r\n    isSortedOfId: boolean\r\n    isSortedOfName: boolean\r\n    isSortedOfAge: boolean\r\n    isSorted: boolean\r\n    arr: PersonsType[]\r\n    showModal: boolean\r\n    toggleShow: Dispatch<SetStateAction<boolean>>\r\n    deleteTable: (index: number) => void\r\n    currentDelete: null | number\r\n    deleteModalShow: (index: number) => void\r\n}\r\n\r\nconst Table: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th onClick={props.sortOfId} style={props.colorIsActive(props.isSortedOfId)}>Id</th>\r\n                        <th onClick={props.sortOfName} style={props.colorIsActive(props.isSortedOfName)}>Name</th>\r\n                        <th onClick={props.sortOfAge} style={props.colorIsActive(props.isSortedOfAge)}>Age</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {props.showModal && <DeleteTable toggleShow={props.toggleShow} deleteTable={props.deleteTable} currentDelete={props.currentDelete} />}\r\n                    {!props.isSorted ?\r\n                        props.arr.map((p, index) => {\r\n                            return <tr key={p.ID} onClick={() => { props.deleteModalShow(index) }} className={'tableTr'}>\r\n                                <td>{p.ID}</td>\r\n                                <td>{p.Name}</td>\r\n                                <td>{p.Age}</td>\r\n                            </tr>\r\n                        })\r\n                        :\r\n                        <tr>\r\n                            <td></td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table","import React, { useState, useEffect } from 'react'\r\nimport { PersonsType } from '../../redux/persons-reducer'\r\nimport { Sorting } from './../Helper/Helper';\r\nimport './Table.css'\r\nimport Table from './Table';\r\n\r\ntype Props = {\r\n    persons: PersonsType[]\r\n}\r\n\r\nconst TableContainer: React.FC<Props> = (props) => {\r\n    const [arr, setArray] = useState([] as PersonsType[])\r\n    const [currentDelete, setCurrentForDelete] = useState(null as null | number);\r\n    const [showModal, toggleShow] = useState(false)\r\n    const [isSorted, toggleSortActive] = useState(false)\r\n    const [isSortedOfId, toggleForId] = useState(false)\r\n    const [isSortedOfAge, toggleForAge] = useState(false)\r\n    const [isSortedOfName, toggleForName] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setArray(props.persons)\r\n    }, [props.persons])\r\n\r\n    const colorIsActive = (option: boolean) => {\r\n        if (option) {\r\n            return {\r\n                color: 'red'\r\n            }\r\n        }\r\n    }\r\n\r\n    const sortOfId = async () => {\r\n        let copyarray = arr;\r\n        let options = {\r\n            isSortedOfId,\r\n            toggleForId\r\n        }\r\n        Sorting('id', copyarray, setArray, toggleSortActive, options)\r\n    }\r\n    const sortOfAge = async () => {\r\n\r\n        let copyarray = arr;\r\n        let options = {\r\n            isSortedOfAge,\r\n            toggleForAge\r\n        }\r\n        Sorting('age', copyarray, setArray, toggleSortActive, options)\r\n    }\r\n    const sortOfName = async () => {\r\n\r\n        let copyarray = arr;\r\n        let options = {\r\n            isSortedOfName,\r\n            toggleForName\r\n        }\r\n        Sorting('name', copyarray, setArray, toggleSortActive, options)\r\n\r\n    }\r\n\r\n    const deleteTable = (index: number) => {\r\n        var array = [...arr];\r\n        array.splice(index, 1);\r\n        setArray(array);\r\n    }\r\n    const deleteModalShow = (index: number) => {\r\n        toggleShow(true)\r\n        setCurrentForDelete(index)\r\n    }\r\n\r\n    return (\r\n        <Table\r\n            deleteModalShow={deleteModalShow}\r\n            isSorted={isSorted}\r\n            deleteTable={deleteTable}\r\n            sortOfName={sortOfName}\r\n            sortOfAge={sortOfAge}\r\n            sortOfId={sortOfId}\r\n            colorIsActive={colorIsActive}\r\n            isSortedOfId={isSortedOfId}\r\n            isSortedOfName={isSortedOfName}\r\n            isSortedOfAge={isSortedOfAge}\r\n            showModal={showModal}\r\n            toggleShow={toggleShow}\r\n            currentDelete={currentDelete}\r\n            arr={arr}\r\n        />\r\n    )\r\n}\r\n\r\nexport default TableContainer","import React from 'react'\r\nimport { PersonsType, FormType } from '../../redux/persons-reducer'\r\nimport './CreateTable.css'\r\n\r\ntype Props = {\r\n    addTableAC: (table: PersonsType) => void\r\n    form: FormType\r\n    addingActive: () => void\r\n    addingMode: boolean\r\n    updateValuesFormAC: (ID: string, Name: string, Age: string) => any\r\n    onChangeForm: (e: any) => void\r\n    createTable: () => void\r\n}\r\n\r\nconst CreateTable: React.FC<Props> = (props) => {\r\n  \r\n    return (\r\n        <div>\r\n            {!props.addingMode ?\r\n                <button onClick={() => { props.addingActive() }}>Новая таблица</button>\r\n                :\r\n                <div className='addingTable'>\r\n                    <form onChange={props.onChangeForm} onSubmit={(e) => { e.preventDefault() }}>\r\n                        <input value={props.form.ID} name=\"id\" required type=\"number\" />\r\n                        <input value={props.form.Name} name=\"name\" required />\r\n                        <input value={props.form.Age} name=\"age\" required type=\"number\" />\r\n                        <div className=\"buttons\">\r\n                            <button onClick={() => { props.createTable() }} className='confirm'>Создать</button>\r\n                            <button onClick={() => { props.addingActive() }} className='cancel'>Отмена</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateTable","import React, { useState } from 'react'\r\nimport CreateTable from './CreateTable'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { addTableAC, PersonsType, updateValuesFormAC, FormType } from './../../redux/persons-reducer';\r\nimport {Validate} from './../Helper/Helper'\r\n\r\ntype Props = {\r\n    addTableAC: (table: PersonsType) => void\r\n    form: FormType\r\n    updateValuesFormAC: (ID: string, Name: string, Age: string) => any\r\n}\r\n\r\nconst CreateTableContainer: React.FC<Props> = (props) => {\r\n    const [addingMode, switchMode] = useState(false)\r\n    const addingActive = () => { switchMode(!addingMode) }\r\n\r\n    const onChangeForm = (e: any) => {\r\n        props.updateValuesFormAC(e.target.form[0].value, e.target.form[1].value, e.target.form[2].value)\r\n    }\r\n    const createTable = async () => {\r\n        if(Validate(props.form.ID,props.form.Name,props.form.Age)){\r\n\r\n        }\r\n        else {\r\n            //@ts-ignore\r\n            await props.addTableAC(props.form);\r\n            props.updateValuesFormAC('', '', '')\r\n            addingActive()\r\n        }\r\n    }\r\n    return (\r\n        <CreateTable addTableAC={props.addTableAC}\r\n            addingActive={addingActive}\r\n            addingMode={addingMode}\r\n            form={props.form}\r\n            updateValuesFormAC={props.updateValuesFormAC}\r\n            createTable={createTable}\r\n            onChangeForm={onChangeForm}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        form: state.persons.addingTableForm\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    addTableAC,\r\n    updateValuesFormAC\r\n})(CreateTableContainer)","import React from 'react'\r\nimport { TrackChangeValue } from '../Helper/Helper'\r\nimport { PersonsType } from '../../redux/persons-reducer'\r\n\r\ntype Props = {\r\n    save: () => void\r\n    copyArr: PersonsType[]\r\n    onChangeVal: (e: any, index: number) => void\r\n}\r\n\r\nconst EditTables: React.FC<Props> = (props) => {\r\n    return (\r\n        <>\r\n            <button onClick={() => { props.save() }}>Сохранить</button>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Name</th>\r\n                        <th>Age</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.copyArr.map((p: any, index: any) => {\r\n                            return <tr key={p.ID} onChange={(e) => { props.onChangeVal(e, index) }}>\r\n                                <td><input type=\"number\" id=\"id\" onChange={(e) => { TrackChangeValue(e, p.ID) }} placeholder={p.ID}\r\n                                /></td>\r\n                                <td><input onChange={(e) => { TrackChangeValue(e, p.Name) }} id=\"name\" placeholder={p.Name}\r\n                                /></td>\r\n                                <td><input type=\"number\" id=\"age\" placeholder={p.Age} onChange={(e) => { TrackChangeValue(e, p.Age) }}\r\n                                /></td>\r\n                            </tr>\r\n                        })\r\n                    })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditTables","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport EditTables from './EditTables';\r\nimport { PersonsType, updateOneTabletInAllAC } from '../../redux/persons-reducer';\r\nimport { AppStateType } from '../../redux/store';\r\nimport { checkOnUndefined } from '../Helper/Helper';\r\n\r\n\r\ntype Props = {\r\n    arr: PersonsType[]\r\n    toggleEditTables: (opt: boolean) => void\r\n    setPersonsAC: (persons: PersonsType[]) => void\r\n    editTables: boolean\r\n    updateOneTabletInAllAC: (table: PersonsType, index: number) => void\r\n}\r\n\r\nconst EditTablesContainer: React.FC<Props> = (props) => {\r\n    const [copyArr, setArr] = useState(props.arr)\r\n    const [canSave, toggleCan] = useState(true);\r\n\r\n\r\n    const save = async () => {\r\n        if (canSave) {\r\n            await props.setPersonsAC(copyArr);\r\n            props.toggleEditTables(false)\r\n            setArr(props.arr)\r\n        } else {\r\n            alert('Не все поля заполнены!')\r\n        }\r\n    }\r\n\r\n    const onChangeVal = (e: any, index: number) => {\r\n        let table = {\r\n            ID: e.currentTarget.children[0].children[0].value,\r\n            //@ts-ignore\r\n            Name: e.currentTarget.children[1].children[0].value,\r\n            //@ts-ignore\r\n            Age: e.currentTarget.children[2].children[0].value\r\n        }\r\n        if (checkOnUndefined(e)) {\r\n            toggleCan(false)\r\n        } else {\r\n            toggleCan(true)\r\n            props.updateOneTabletInAllAC(table, index)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={() => { props.toggleEditTables(true) }}>\r\n                Редактировать\r\n            </button>\r\n            {props.editTables &&\r\n                <EditTables\r\n                    save={save}\r\n                    copyArr={copyArr}\r\n                    onChangeVal={onChangeVal}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n}\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        arr: state.persons.persons\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    updateOneTabletInAllAC\r\n})(EditTablesContainer)","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport 'materialize-css';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport { connect } from 'react-redux';\nimport { AppStateType } from './redux/store';\nimport { setPersonsAC } from './redux/persons-reducer';\nimport PersonJson from './assets/json/small_data_persons.json'\nimport { PersonsType } from './redux/persons-reducer'\nimport TableContainer from './Components/Table/TableContainer';\nimport CreateTableContainer from './Components/CreateTable/CreateTableContainer';\nimport EditTablesContainer from './Components/EditTables/EditTablesContainer';\n\ntype Props = {\n  persons: PersonsType[]\n  setPersonsAC: (persons: PersonsType[]) => void\n}\n\nconst App: React.FC<Props> = (props) => {\n  const [editTables, toggleEditTables] = useState(false)\n  useEffect(() => {\n    props.setPersonsAC(PersonJson)\n    // eslint-disable-next-line\n  }, [])\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        {!editTables && <CreateTableContainer />}\n        {props.persons.length >= 1 &&\n          <EditTablesContainer\n            toggleEditTables={toggleEditTables}\n            setPersonsAC={setPersonsAC}\n            editTables={editTables}\n          />\n        }\n        {!editTables &&\n          <TableContainer persons={props.persons} />\n        }\n      </div>\n    </div>\n  );\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    persons: state.persons.persons\n  }\n}\n\n\n\nexport default connect(mapStateToProps, {\n  setPersonsAC\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport personsReducer from \"./persons-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    persons: personsReducer\r\n})\r\n\r\n//\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\n//extension\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// let store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider\n        store={store} >\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}